{"version":3,"sources":["Components/MainPage/test2.js","App.js","serviceWorker.js","index.js"],"names":["initialState","toptext","bottomtext","watermark","isTopDragging","isBottomDragging","isWatermarkDragging","topY","topX","bottomX","bottomY","watermarkX","watermarkY","fontSize","opacity","watermarkColor","watermarkSize","MainPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertToBase64","blob","reader","FileReader","onload","image","Image","src","result","ratio","height","width","canvas","document","createElement","context","getContext","fillStyle","fillRect","drawImage","dataURL","toDataURL","console","log","setState","objectSpread","currentImagebase64","newHeight","newWidth","readAsDataURL","openImage","event","URL","createObjectURL","target","files","newblob","changeWatermarkColor","value","changeFontSize","changeWatermarkSize","watermarkFontSize","changeOpacity","changeText","defineProperty","currentTarget","name","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","setAttribute","svgSize","img","btoa","unescape","encodeURIComponent","canvasdata","a","download","href","body","appendChild","click","_this2","textStyle","fontFamily","fontWeight","fill","userSelect","color","padding","margin","watermarkStyle","react_default","className","id","alt","onChange","reactstrap_es","for","placeholder","min","max","onClick","ref","el","xmlns","xmlnsXlink","x","y","onMouseDown","onMouseUp","style","overflow","align","textAnchor","zIndex","dominant-baseline","text-anchor","dominantBaseline","React","Component","App","test2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7de92525.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormGroup, Label } from \"reactstrap\";\n\nimport \"../../App.css\";\n\nconst initialState = {\n  toptext: \"\",\n  bottomtext: \"\",\n  watermark: \"\",\n  isTopDragging: false,\n  isBottomDragging: false,\n  isWatermarkDragging: false,\n  topY: \"10px\",\n  topX: \"7px\",\n  bottomX: \"50%\",\n  bottomY: \"90%\",\n  watermarkX: \"25%\",\n  watermarkY: \"45%\",\n  fontSize: 30,\n  opacity: 0.5,\n  watermarkColor: \"#FFFFFF\",\n  watermarkSize: 25,\n};\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentImagebase64: null,\n      ...initialState,\n    };\n  }\n\n  convertToBase64 = (blob) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      var image = new Image();\n      image.src = reader.result;\n      image.onload = () => {\n        var ratio = image.height / image.width;\n        image.width = 500;\n        image.height = 500 * ratio;\n\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        //console.log(canvas.width)\n        canvas.height = image.height + image.height / 3;\n        //console.log(image.height, canvas.height)\n        var context = canvas.getContext(\"2d\");\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, canvas.width + 200, canvas.height);\n        // var newImage = canvas.toDataURL('image/png').replace(/^data:image\\/(png|jpg);base64,/, '')\n        // console.log(newImage)\n        context.drawImage(\n          image,\n          0,\n          image.height / 3,\n          image.width,\n          image.height\n        );\n\n        var dataURL = canvas.toDataURL();\n\n        console.log(dataURL);\n        // nogw you can do something with the dataURL\n        this.setState(() => ({\n          currentImagebase64: dataURL,\n          newHeight: canvas.height,\n          newWidth: canvas.width,\n          ...initialState,\n        }));\n      };\n    };\n    reader.readAsDataURL(blob);\n  };\n\n  openImage = (event) => {\n    URL.createObjectURL(event.target.files[0]);\n    const newblob = event.target.files[0];\n    this.convertToBase64(newblob);\n  };\n\n  changeWatermarkColor = (event) => {\n    this.setState({\n      watermarkColor: event.target.value,\n    });\n  };\n\n  changeFontSize = (event) => {\n    this.setState({\n      fontSize: event.target.value,\n    });\n  };\n\n  changeWatermarkSize = (event) => {\n    this.setState({\n      watermarkFontSize: event.target.value,\n    });\n  };\n\n  changeOpacity = (event) => {\n    this.setState({\n      opacity: event.target.value / 100,\n    });\n  };\n\n  changeText = (event) => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value,\n    });\n  };\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect();\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top;\n    let stateObj = {};\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        isWatermarkDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`,\n      };\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        isWatermarkDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`,\n      };\n    } else if (type === \"watermark\") {\n      stateObj = {\n        isTopDragging: false,\n        isBottomDragging: false,\n        isWatermarkDragging: true,\n        watermarkX: `${xOffset}px`,\n        watermarkY: `${yOffset}px`,\n      };\n    }\n    return stateObj;\n  };\n\n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type);\n    document.addEventListener(\"mousemove\", (event) =>\n      this.handleMouseMove(event, type)\n    );\n    this.setState({\n      ...stateObj,\n    });\n  };\n\n  handleMouseMove = (e, type) => {\n    if (\n      this.state.isTopDragging ||\n      this.state.isBottomDragging ||\n      this.state.isWatermarkDragging\n    ) {\n      let stateObj = {};\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type);\n      } else if (type === \"top\" && this.state.isTopDragging) {\n        stateObj = this.getStateObj(e, type);\n      } else if (type === \"watermark\" && this.state.isWatermarkDragging) {\n        stateObj = this.getStateObj(e, type);\n      }\n      this.setState({\n        ...stateObj,\n      });\n    }\n  };\n\n  handleMouseUp = (event) => {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false,\n      isWatermarkDragging: false,\n    });\n  };\n\n  convertSvgToImage = () => {\n    const svg = this.svgRef;\n    let svgData = new XMLSerializer().serializeToString(svg);\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n    const img = document.createElement(\"img\");\n    img.setAttribute(\n      \"src\",\n      \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData)))\n    );\n    img.onload = function() {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"meme.png\";\n      a.href = canvasdata;\n      document.body.appendChild(a);\n      a.click();\n    };\n  };\n\n  render() {\n    const textStyle = {\n      fontFamily: \"Helvetica\",\n      fontSize: `${this.state.fontSize}px`,\n      fontWeight: 0.1,\n      fill: \"#000\",\n      userSelect: \"none\",\n      color: \"black\",\n      padding: 0,\n      margin: 0,\n    };\n\n    const watermarkStyle = {\n      fontFamily: \"Arial\",\n      fontSize: `${this.state.watermarkFontSize}px`,\n      userSelect: \"none\",\n      opacity: `${this.state.opacity}`,\n      fill: `${this.state.watermarkColor}`,\n    };\n\n    const wrap = {\n      overflow: \"auto\",\n      align: \"left\",\n      textAnchor: \"start\",\n    };\n    return (\n      <div className=\"ui raised very padded text container segment\">\n        <div className=\"ui two column centered grid\">\n          <div className=\"column\">\n            <input\n              type=\"file\"\n              id=\"image\"\n              alt=\"Select Image\"\n              onChange={(e) => this.openImage(e)}\n            ></input>\n          </div>\n          <div className=\" four column center row\">\n            <div className=\"column\">\n              <FormGroup>\n                <Label for=\"toptext\">Top Text</Label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"toptext\"\n                  id=\"toptext\"\n                  placeholder=\"Add text to the top\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n            </div>\n            <div className=\"column\">\n              <FormGroup>\n                <Label for=\"resizebottomtext\">Top Text Size</Label>\n                <input\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"100\"\n                  name=\"resizebottom text\"\n                  onChange={this.changeFontSize}\n                />\n              </FormGroup>\n            </div>\n          </div>\n          <div className=\" four column center row\">\n            <div className=\"column\">\n              <FormGroup>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"watermark\"\n                  id=\"watermark\"\n                  placeholder=\"Add watermark\"\n                  onChange={this.changeText}\n                />\n              </FormGroup>\n            </div>\n            <div className=\"column\">\n              <button\n                onClick={this.changeWatermarkColor}\n                value=\"#FFFFFF\"\n                className=\"ui basic button\"\n              >\n                White\n              </button>\n\n              <button\n                onClick={this.changeWatermarkColor}\n                value=\"#000000\"\n                className=\"ui secondary button\"\n              >\n                Black\n              </button>\n            </div>\n            <div className=\"column\">\n              <p>Watermark Opacity</p>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeOpacity}\n              />\n\n              <p>Watermark Size</p>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeWatermarkSize}\n              />\n            </div>\n          </div>\n          <div className=\" four column center row\">\n            <div className=\"column\">\n              <button\n                onClick={() => this.convertSvgToImage()}\n                className=\"ui button primary\"\n              >\n                Download Meme!\n              </button>\n            </div>\n          </div>\n\n          <svg\n            width={this.state.newWidth}\n            height={this.state.newHeight}\n            id=\"svg_ref\"\n            ref={(el) => {\n              this.svgRef = el;\n            }}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          >\n            <image\n              ref={(el) => {\n                this.imageRef = el;\n              }}\n              href={this.state.currentImagebase64}\n              width={this.state.newWidth}\n              height={this.state.newHeight}\n            />\n            <foreignObject\n              // x={this.state.topX}\n              // y={this.state.topY}\n              width={this.state.newWidth - 50}\n              height={this.state.newHeight}\n              x={this.state.topX}\n              y={this.state.topY}\n              onMouseDown={(event) => this.handleMouseDown(event, \"top\")}\n              onMouseUp={(event) => this.handleMouseUp(event, \"top\")}\n            >\n              <code>\n                <div xmlns=\"http://www.w3.org/1999/xhtml\" style={wrap}>\n                  <text\n                    style={{\n                      ...textStyle,\n                      zIndex: this.state.isTopDragging ? 4 : 1,\n                    }}\n                    dominant-baseline=\"middle\"\n                    text-anchor=\"middle\"\n                    onMouseDown={(event) => this.handleMouseDown(event, \"top\")}\n                    onMouseUp={(event) => this.handleMouseUp(event, \"top\")}\n                  >\n                    {this.state.toptext}\n                  </text>\n                </div>\n              </code>\n            </foreignObject>\n\n            <text\n              style={watermarkStyle}\n              dominantBaseline=\"middle\"\n              textAnchor=\"middle\"\n              x={this.state.watermarkX}\n              y={this.state.watermarkY}\n              onMouseDown={(event) => this.handleMouseDown(event, \"watermark\")}\n              onMouseUp={(event) => this.handleMouseUp(event, \"watermark\")}\n            >\n              {this.state.watermark}\n            </text>\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport Test2 from './Components/MainPage/test2';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Test2 />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}